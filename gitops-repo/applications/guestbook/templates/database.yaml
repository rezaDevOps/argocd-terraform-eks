{{/*
Guestbook Database (Redis) Component
Sync Wave: 1 (deployed first)
*/}}
{{- if .Values.database.enabled }}
---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.global.namespace | default "guestbook" }}
  labels:
    app.kubernetes.io/name: guestbook
    app.kubernetes.io/component: database
    environment: {{ .Values.environment }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.database.name }}-config
  namespace: {{ .Values.global.namespace | default "guestbook" }}
  labels:
    app.kubernetes.io/name: {{ .Values.database.name }}
    app.kubernetes.io/component: database
    environment: {{ .Values.environment }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"
data:
  redis.conf: |
    maxmemory {{ .Values.database.config.maxmemory }}
    maxmemory-policy {{ .Values.database.config.maxmemoryPolicy }}
    save 900 1
    save 300 10
    save 60 10000

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.database.name }}
  namespace: {{ .Values.global.namespace | default "guestbook" }}
  labels:
    app.kubernetes.io/name: {{ .Values.database.name }}
    app.kubernetes.io/component: database
    environment: {{ .Values.environment }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  selector:
    app.kubernetes.io/name: {{ .Values.database.name }}
  ports:
    - port: {{ .Values.database.service.port }}
      targetPort: 6379
      protocol: TCP
      name: redis
  type: {{ .Values.database.service.type }}

---
{{- if .Values.database.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.database.name }}-pvc
  namespace: {{ .Values.global.namespace | default "guestbook" }}
  labels:
    app.kubernetes.io/name: {{ .Values.database.name }}
    app.kubernetes.io/component: database
    environment: {{ .Values.environment }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  accessModes:
    - {{ .Values.database.persistence.accessMode }}
  resources:
    requests:
      storage: {{ .Values.database.persistence.size }}
  {{- if .Values.global.storageClass }}
  storageClassName: {{ .Values.global.storageClass }}
  {{- end }}
---
{{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.database.name }}
  namespace: {{ .Values.global.namespace | default "guestbook" }}
  labels:
    app.kubernetes.io/name: {{ .Values.database.name }}
    app.kubernetes.io/component: database
    environment: {{ .Values.environment }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.database.name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.database.name }}
        app.kubernetes.io/component: database
        environment: {{ .Values.environment }}
    spec:
      containers:
        - name: redis
          image: "{{ .Values.database.image.repository }}:{{ .Values.database.image.tag }}"
          imagePullPolicy: {{ .Values.database.image.pullPolicy }}
          ports:
            - containerPort: 6379
              name: redis
              protocol: TCP
          resources:
            {{- toYaml .Values.database.resources | nindent 12 }}
          volumeMounts:
            - name: redis-config
              mountPath: /usr/local/etc/redis/redis.conf
              subPath: redis.conf
            {{- if .Values.database.persistence.enabled }}
            - name: redis-data
              mountPath: /data
            {{- end }}
          command:
            - redis-server
            - /usr/local/etc/redis/redis.conf
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: redis-config
          configMap:
            name: {{ .Values.database.name }}-config
        {{- if .Values.database.persistence.enabled }}
        - name: redis-data
          persistentVolumeClaim:
            claimName: {{ .Values.database.name }}-pvc
        {{- else }}
        - name: redis-data
          emptyDir: {}
        {{- end }}
{{- end }}
